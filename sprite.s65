		.setcpu "65C02"
        .include "zeropage.inc65"
        .include "macros.inc65"
		.include "video_common.inc65"
		.include "video_registers.inc65"
        .export spr_set_small
        .export spr_set_large
        .export spr_set_mag_on
        .export spr_set_mag_off
        .export vdp_init_sprites

;.bss

; sprite movement table (not animated)
; struct {
;           byte pattern;
;           byte xpos;
;           byte ypos;
;           byte xspeed; 
;           byte yspeed;
;        }
;spr_tab:    .res 4*32, 0

.code

;================================================================
;; Sprite routines

spr_set_small: ;; set small sprites in registers
				phay
                LDA ZP_VDP_REGS+1
                AND #$FD
                STA ZP_VDP_REGS+1
                LDY #$81            ;; register 1
                JSR vdp_regwrite
				play
                RTS
                
spr_set_large: ;; set large sprites in registers
				phay
                LDA ZP_VDP_REGS+1
                ORA #$02
                STA ZP_VDP_REGS+1
                LDY #$81            ;; register 1
                JSR vdp_regwrite
				play
                RTS                

spr_set_mag_on: 
				phay
                LDA ZP_VDP_REGS+1
                ORA #$01
                STA ZP_VDP_REGS+1
                LDY #$81            ;; register 1
                JSR vdp_regwrite
				play
                RTS                

spr_set_mag_off:
				phay
                LDA ZP_VDP_REGS+1
                AND #$FE
                STA ZP_VDP_REGS+1
                LDY #$81            ;; register 1
                JSR vdp_regwrite
				play
                RTS                


;----------------------------------------------------------------
; Initialise sprites - all off
vdp_init_sprites:
				phay
                LDY ZP_VDP_SAB
                LDA ZP_VDP_SAB+1
                JSR vdp_set_addr_w
                ;; 32 sprites 4 bytes each = 128
                LDY #128
                LDX #$D0    ;; D0 in vertical pos turns off sprite processing
                LDA #0      ;; zero in other 3 fields
vis_loop:       STX VDP_WR_VRAM
                DEY             ;; 2 cycles = 2us at 1MHz
                STA VDP_WR_VRAM
                DEY
                STA VDP_WR_VRAM
                DEY
                STA VDP_WR_VRAM
                DEY
                BNE vis_loop
				play
                RTS

;----------------------------------------------------------------
; Enable first N sprites (N in Acc)
; only write name - don't affect other numbers (i.e. pos/col)
; Max N is 32, 0 = Disable all
; SAB is on 128 byte boundary so sprite address can be added to 
; LSB of SAB table address without doing 16bit add
vdp_enable_sprites:
				phaxy
				STA TMP0			; save N
				LDX #32				; counter (all 32)
				LDY ZP_VDP_SAB		; SAB lo
ves_loop:		LDA ZP_VDP_SAB+1	; hi
                JSR vdp_set_addr_w
				DEX
				CPX TMP0
				BCC @enable			; Branch if X < TMP0
				LDA #$D0
				JMP @dowrite
@enable:		LDA #0 
@dowrite:		STA VDP_WR_VRAM
				INY
				INY
				INY
				INY
				CPX #0
				BNE ves_loop
				plaxy
				RTS
