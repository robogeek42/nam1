; ACIA registers

ACIA_BASE    = $7f00
ACIA_DATA    = ACIA_BASE
ACIA_STATUS  = ACIA_BASE + 1
ACIA_COMMAND = ACIA_BASE + 2
ACIA_CONTROL = ACIA_BASE + 3

; ACIA control register bit values

ACIA_STOP_BITS_1 = %00000000
ACIA_STOP_BITS_2 = %10000000
ACIA_DATA_BITS_8 = %00000000
ACIA_DATA_BITS_7 = %00100000
ACIA_DATA_BITS_6 = %01000000
ACIA_DATA_BITS_5 = %01100000
ACIA_CLOCK_EXT   = %00000000
ACIA_CLOCK_INT   = %00010000
ACIA_BAUD_16XEXT = %00000000
ACIA_BAUD_50     = %00000001
ACIA_BAUD_75     = %00000010
ACIA_BAUD_109    = %00000011
ACIA_BAUD_134    = %00000100
ACIA_BAUD_150    = %00000101
ACIA_BAUD_300    = %00000110
ACIA_BAUD_600    = %00000111
ACIA_BAUD_1200   = %00001000
ACIA_BAUD_1800   = %00001001
ACIA_BAUD_2400   = %00001010
ACIA_BAUD_3600   = %00001011
ACIA_BAUD_4800   = %00001100
ACIA_BAUD_7200   = %00001101
ACIA_BAUD_9600   = %00001110
ACIA_BAUD_19200  = %00001111

; ACIA command register bit values

ACIA_PARITY_ODD              = %00000000
ACIA_PARITY_EVEN             = %01000000
ACIA_PARITY_MARK             = %10000000
ACIA_PARITY_SPACE            = %11000000
ACIA_PARITY_DISABLE          = %00000000
ACIA_PARITY_ENABLE           = %00100000
ACIA_ECHO_DISABLE            = %00000000
ACIA_ECHO_ENABLE             = %00010000
ACIA_TX_INT_DISABLE_RTS_HIGH = %00000000
ACIA_TX_INT_ENABLE_RTS_LOW   = %00000100
ACIA_TX_INT_DISABLE_RTS_LOW  = %00001000
ACIA_TX_INT_DISABLE_BREAK    = %00001100
ACIA_RX_INT_ENABLE           = %00000000
ACIA_RX_INT_DISABLE          = %00000010
ACIA_DTR_HIGH                = %00000000
ACIA_DTR_LOW                 = %00000001

; ACIA status register bit masks

ACIA_STATUS_IRQ        = 1 << 7
ACIA_STATUS_DSR        = 1 << 6
ACIA_STATUS_DCD        = 1 << 5
ACIA_STATUS_TX_EMPTY   = 1 << 4
ACIA_STATUS_RX_FULL    = 1 << 3
ACIA_STATUS_OVERRUN    = 1 << 2
ACIA_STATUS_FRAME_ERR  = 1 << 1
ACIA_STATUS_PARITY_ERR = 1 << 0

;*********************************************************
; VIA registers

VIA_BASE   = $7f40
VIA_ORB    = VIA_BASE
VIA_IRB    = VIA_BASE
VIA_ORA    = VIA_BASE + 1
VIA_IRA    = VIA_BASE + 1
VIA_DDRB   = VIA_BASE + 2
VIA_DDRA   = VIA_BASE + 3
VIA_T1C_L  = VIA_BASE + 4
VIA_T1C_H  = VIA_BASE + 5
VIA_T1L_L  = VIA_BASE + 6
VIA_T1L_H  = VIA_BASE + 7
VIA_T2C_L  = VIA_BASE + 8
VIA_T2C_H  = VIA_BASE + 9
VIA_SR     = VIA_BASE + 10
VIA_ACR    = VIA_BASE + 11
VIA_PCR    = VIA_BASE + 12
VIA_IFR    = VIA_BASE + 13
VIA_IER    = VIA_BASE + 14
VIA_ORA_NH = VIA_BASE + 15
VIA_IRA_NH = VIA_BASE + 15

; Port bits

VIA_PA0 = (1 << 0)
VIA_PA1 = (1 << 1)
VIA_PA2 = (1 << 2)
VIA_PA3 = (1 << 3)
VIA_PA4 = (1 << 4)
VIA_PA5 = (1 << 5)
VIA_PA6 = (1 << 6)
VIA_PA7 = (1 << 7)

; Port bits

VIA_PB0 = 1 << 0
VIA_PB1 = 1 << 1
VIA_PB2 = 1 << 2
VIA_PB3 = 1 << 3
VIA_PB4 = 1 << 4
VIA_PB5 = 1 << 5
VIA_PB6 = 1 << 6
VIA_PB7 = 1 << 7


;*********************************************************
;* (c) Dolo Miah - defs for his SD card and FAT16 FS code
;* SD Card interface definitions
;* The card is accessed through port A of VIA2 (Dolo has B of VIA 2)
SD_CLK		= $01	; bit 1  - easier for INC/DEC to simulate clock
SD_CD		= $04	; bit 2
SD_CS		= $08	; bit 3
SD_DI		= $10	; bit 4
SD_DO		= $80	; bit 7

SD_MOSI		= SD_DI
SD_MISO		= SD_DO
SD_REG		= VIA_ORA	; was IO_1+PRB

CMD_ERR_NOERROR			= $00
CMD_ERR_NOTFOUND		= $01
CMD_ERR_PARM			= $02
CMD_ERR_VAL				= $03

;* Number formats for conversion routines
NUM_ANY		= $00
NUM_DEC		= $01
NUM_HEX		= $02
NUM_BIN		= $03

	
;* SD Card Master Boot Record (MBR) definitions
;* The MBR contains the essential information
;* needed to access the data on the card
;* MBR is usually sector 0, but not always
;* however the card I am using does work ok.
MBR_Code				=	$0000
MBR_OEMName				=	$0003
MBR_BytesPerSect		=	$000b
MBR_SectPerClust		=	$000d
MBR_ResvSect			=	$000e
MBR_FATCopies			=	$0010
MBR_RootEntries			=	$0011
MBR_SmlSect				=	$0013
MBR_MediaDesc			=	$0015
MBR_SectPerFAT			=	$0016
MBR_SectPerTrk			=	$0018
MBR_NumHeads			=	$001a
MBR_NumHidSect			=	$001c
MBR_NumSect				=	$0020
MBR_DrvNum				=	$0024
MBR_ExtSig				=	$0026
MBR_SerNo				=	$0027
MBR_VolName				=	$002b
MBR_FATName				=	$0036
MBR_ExeCode				=	$003e
MBR_ExeMark				=	$01fe

;* FAT16 definitions - these are offsets
;* in to a FAT table entry which is
;* 32 bytes in length.
FAT_Name				= 	$00
FAT_Ext					=	$08
FAT_Attr				=	$0b
FAT_Resv				=	$0c
FAT_Createms			=	$0d
FAT_CreateTime			=	$0e
FAT_CreateDate			=	$10
FAT_AccessDate			=	$12
FAT_EAIndex				=	$14
FAT_ModTime				=	$16
FAT_ModDate				=	$18
FAT_FirstClust			=	$1a
FAT_FileSize			=	$1c


FS_BLK_FLG_LOAD		 	= 	$01		; On next byte, load block
FS_BLK_FLG_FLUSH		=	$02		; Block has changed, needs flushing
	
FS_ERR_EOF				=	$01

;*********************************************************

