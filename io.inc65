; Device map
; $7F00 - $7F1F : ACIA
; $7F20 - $7F3F : Sound --- not anymore!
; $7F40 - $7F5F : VIA1 (Keyboard)
; $7F60 - $7F7F : VDP
; $7F80 - $7F9F : VIA2 (Joy & SD card)
; $7FA0 - $7FBF : DS Clock
; $7FC0 - $7FDF : --
; $7FE0 - $7FFF : --

; ACIA registers

ACIA_BASE    = $7f00
ACIA_DATA    = ACIA_BASE
ACIA_STATUS  = ACIA_BASE + 1
ACIA_COMMAND = ACIA_BASE + 2
ACIA_CONTROL = ACIA_BASE + 3

; ACIA control register bit values

ACIA_STOP_BITS_1 = %00000000
ACIA_STOP_BITS_2 = %10000000
ACIA_DATA_BITS_8 = %00000000
ACIA_DATA_BITS_7 = %00100000
ACIA_DATA_BITS_6 = %01000000
ACIA_DATA_BITS_5 = %01100000
ACIA_CLOCK_EXT   = %00000000
ACIA_CLOCK_INT   = %00010000
ACIA_BAUD_16XEXT = %00000000
ACIA_BAUD_50     = %00000001
ACIA_BAUD_75     = %00000010
ACIA_BAUD_109    = %00000011
ACIA_BAUD_134    = %00000100
ACIA_BAUD_150    = %00000101
ACIA_BAUD_300    = %00000110
ACIA_BAUD_600    = %00000111
ACIA_BAUD_1200   = %00001000
ACIA_BAUD_1800   = %00001001
ACIA_BAUD_2400   = %00001010
ACIA_BAUD_3600   = %00001011
ACIA_BAUD_4800   = %00001100
ACIA_BAUD_7200   = %00001101
ACIA_BAUD_9600   = %00001110
ACIA_BAUD_19200  = %00001111

; ACIA command register bit values

ACIA_PARITY_ODD              = %00000000
ACIA_PARITY_EVEN             = %01000000
ACIA_PARITY_MARK             = %10000000
ACIA_PARITY_SPACE            = %11000000
ACIA_PARITY_DISABLE          = %00000000
ACIA_PARITY_ENABLE           = %00100000
ACIA_ECHO_DISABLE            = %00000000
ACIA_ECHO_ENABLE             = %00010000
ACIA_TX_INT_DISABLE_RTS_HIGH = %00000000
ACIA_TX_INT_ENABLE_RTS_LOW   = %00000100
ACIA_TX_INT_DISABLE_RTS_LOW  = %00001000
ACIA_TX_INT_DISABLE_BREAK    = %00001100
ACIA_RX_INT_ENABLE           = %00000000
ACIA_RX_INT_DISABLE          = %00000010
ACIA_DTR_HIGH                = %00000000
ACIA_DTR_LOW                 = %00000001

; ACIA status register bit masks

ACIA_STATUS_IRQ        = 1 << 7
ACIA_STATUS_DSR        = 1 << 6
ACIA_STATUS_DCD        = 1 << 5
ACIA_STATUS_TX_EMPTY   = 1 << 4
ACIA_STATUS_RX_FULL    = 1 << 3
ACIA_STATUS_OVERRUN    = 1 << 2
ACIA_STATUS_FRAME_ERR  = 1 << 1
ACIA_STATUS_PARITY_ERR = 1 << 0

;*********************************************************
; VIA registers

VIA1       = $7F40
VIA2       = $7F80

VIA_ORB    = 0
VIA_IRB    = 0
VIA_ORA    = 1
VIA_IRA    = 1
VIA_DDRB   = 2
VIA_DDRA   = 3
VIA_T1C_L  = 4
VIA_T1C_H  = 5
VIA_T1L_L  = 6
VIA_T1L_H  = 7
VIA_T2C_L  = 8
VIA_T2C_H  = 9
VIA_SR     = 10
VIA_ACR    = 11
VIA_PCR    = 12
VIA_IFR    = 13
VIA_IER    = 14
VIA_ORA_NH = 15
VIA_IRA_NH = 15

; Port bits

VIA_PA0 = (1 << 0)
VIA_PA1 = (1 << 1)
VIA_PA2 = (1 << 2)
VIA_PA3 = (1 << 3)
VIA_PA4 = (1 << 4)
VIA_PA5 = (1 << 5)
VIA_PA6 = (1 << 6)
VIA_PA7 = (1 << 7)

; Port bits

VIA_PB0 = 1 << 0
VIA_PB1 = 1 << 1
VIA_PB2 = 1 << 2
VIA_PB3 = 1 << 3
VIA_PB4 = 1 << 4
VIA_PB5 = 1 << 5
VIA_PB6 = 1 << 6
VIA_PB7 = 1 << 7


;*********************************************************
;* (c) Dolo Miah - defs for his SD card and FAT16 FS code
;* SD Card interface definitions
;* The card is accessed through port B of VIA2
SD_CLK		= $01	; bit 0  - easier for INC/DEC to simulate clock
SD_CS		= $08	; bit 3
SD_DI		= $10	; bit 4
SD_DO		= $80	; bit 7

SD_MOSI		= SD_DI
SD_MISO		= SD_DO
SD_REG		= VIA2 + VIA_ORB

CMD_ERR_NOERROR			= $00
CMD_ERR_NOTFOUND		= $01
CMD_ERR_PARM			= $02
CMD_ERR_VAL				= $03

;* Number formats for conversion routines
NUM_ANY		= $00
NUM_DEC		= $01
NUM_HEX		= $02
NUM_BIN		= $03

	
;* SD Card Master Boot Record (MBR) definitions
;* The MBR contains the essential information
;* needed to access the data on the card
;* MBR is usually sector 0, but not always
;* however the card I am using does work ok.
MBR_Code				=	$0000
MBR_OEMName				=	$0003
MBR_BytesPerSect		=	$000b
MBR_SectPerClust		=	$000d
MBR_ResvSect			=	$000e
MBR_FATCopies			=	$0010
MBR_RootEntries			=	$0011
MBR_SmlSect				=	$0013
MBR_MediaDesc			=	$0015
MBR_SectPerFAT			=	$0016
MBR_SectPerTrk			=	$0018
MBR_NumHeads			=	$001a
MBR_NumHidSect			=	$001c
MBR_NumSect				=	$0020
MBR_DrvNum				=	$0024
MBR_ExtSig				=	$0026
MBR_SerNo				=	$0027
MBR_VolName				=	$002b
MBR_FATName				=	$0036
MBR_ExeCode				=	$003e
MBR_ExeMark				=	$01fe

;* FAT16 definitions - these are offsets
;* in to a FAT table entry which is
;* 32 bytes in length.
FAT_Name				= 	$00
FAT_Ext					=	$08
FAT_Attr				=	$0b
FAT_Resv				=	$0c
FAT_Createms			=	$0d
FAT_CreateTime			=	$0e
FAT_CreateDate			=	$10
FAT_AccessDate			=	$12
FAT_EAIndex				=	$14
FAT_ModTime				=	$16
FAT_ModDate				=	$18
FAT_FirstClust			=	$1a
FAT_FileSize			=	$1c


FS_BLK_FLG_LOAD		 	= 	$01		; On next byte, load block
FS_BLK_FLG_FLUSH		=	$02		; Block has changed, needs flushing
	
FS_ERR_EOF				=	$01

;*********************************************************

; Sound Chip SN76489
SND_VIA_DATA			= VIA2 + VIA_ORA
SND_VIA_CTL				= VIA2 + VIA_ORB
SND_VIA_WE				= %01000000
SND_VIA_CE				= %00100000
;SND_VIA_READY			= %00000010
SND_VIA_WE_CE           = %01100000
SND_VIA_NOT_WE_CE       = %10011111

; PS2 Keyboard
; see pckybd.s65
;PS2K_CLK               = %00000010 ; $02
;PS2K_DAT               = %00000100 ; $04
;PS2K_DAT_OR_CLK        = %00000110 ; $06
;PS2K_NOT_CLK           = %11111101 ; $FD
;PS2K_NOT_DAT           = %11111011 ; $FB
;PS2K_NOT_CLK_DAT       = %11111001 ; $F9
;
; VIA2 PORT B
;  B0 SD CLK
;  B1
;  B2
;  B3 SD CS
;  B4 SD DI
;  B5 SND CE
;  B6 SND WE
;  B7 SD DO

;-----------------------------------------------------------
; PS2 Keyboard Scan codes
SC_DONOTHING = $FF
SC_A = $1C
SC_B = $32
SC_C = $21
SC_D = $23
SC_E = $24
SC_F = $2B
SC_G = $34
SC_H = $33
SC_I = $43
SC_J = $3B
SC_K = $42
SC_L = $4B
SC_M = $3A
SC_N = $31
SC_O = $44
SC_P = $4D
SC_Q = $15
SC_R = $2D
SC_S = $1B
SC_T = $2C
SC_U = $3C
SC_V = $2A
SC_W = $1D
SC_X = $22
SC_Y = $35
SC_Z = $1A
SC_SPC = $29
SC_F1 = $05 
SC_F2 = $06
SC_F3 = $04
SC_F4 = $0C
SC_F5 = $03
SC_F6 = $0B
SC_F7 = $02
SC_F8 = $0A
SC_F9 = $01
SC_F10 = $09
SC_F11 = $78
SC_F12 = $07
SC_TAB = $0D
SC_BACKTICK = $0E
SC_1 = $16
SC_2 = $1E
SC_3 = $26
SC_4 = $25
SC_5 = $2E
SC_6 = $36
SC_7 = $3D
SC_8 = $3E
SC_9 = $46
SC_0 = $45
SC_COMMA = $41
SC_DOT = $49
SC_FWDSLASH = $4A
SC_SEMICOLON = $4C
SC_MINUS = $4E
SC_TICK = $52
SC_LFTSQBRKT = $54
SC_EQUALS = $55
SC_CAPS = $58
SC_RSHIFT = $59
SC_ENTER = $5A
SC_RGTSQBRKT = $5B
SC_HASH = $5D
SC_BKSLASH = $61
SC_BKSPACE = $66
SC_ESCAPE = $76
SC_KP0 = $70
SC_KP1 = $69
SC_KP2 = $72
SC_KP3 = $7A
SC_KP4 = $6B
SC_KP5 = $73
SC_KP6 = $74
SC_KP7 = $6C
SC_KP8 = $75
SC_KP9 = $7D
SC_KPSLASH = $6A
SC_KPDOT = $71
SC_KPPLUS = $79
SC_KPMINUS = $7B
SC_KPSTAR = $7C
SC_NUMLOCK = $77 ; num lock
SC_SCROLLOCK = $7E ; scroll lock
SC_PRINTSCR = $0F ; relocated Print Screen key
SC_PAUSE = $10 ; relocated Pause/Break key
SC_LFTALT = $11 ; left alt (right alt too)
SC_LFTSHIFT = $12 ; left shift
SC_ALTRELEASE = $13 ; relocated Alt release code
SC_LEFTCTRL = $14 ; left ctrl (right ctrl too)
SC_LFTWINDOWS = $1F ; Windows 98 menu key (left side)
SC_CTRLBREAK = $20 ; relocated ctrl-break key
SC_RGTWINDOWS = $27 ; Windows 98 menu key (right side)
SC_RGTWINDOWSOPT = $2F ; Windows 98 option key (right click, right side)
